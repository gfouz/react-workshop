[{"id":1648591200,"img":"bem.jpg\r","title":" CSS BEM. \r","author":"Giovani Fouz Jiménez.\r","date":"march 30, 2022\r","description":"CSS Architecture...\r","position":"top\r","content":"\r\n## BEM.\r\nWhen it comes to finding the right class name, it can quickly drive you to despair. \r\nEven the most experienced CSS developers don't always find the right class name right away.\r\nThe Block, Element, Modifier methodology (commonly referred to as BEM) is a popular naming convention for classes in HTML and CSS. Developed by the team at Yandex, its goal is to help developers better understand the relationship between the HTML and CSS in a given project.\r\n\r\nHere’s an example of what a CSS developer writing in the BEM style might write:\r\n```css\r\n\r\n/* Block component */\r\n.btn {}\r\n\r\n/* Element that depends upon the block */ \r\n.btn__price {}\r\n\r\n/* Modifier that changes the style of the block */\r\n.btn--orange {} \r\n.btn--big {}\r\n\r\n```\r\nIn this CSS methodology a block is a top-level abstraction of a new component, for example a button: .btn { }. This block should be thought of as a parent. Child items, or elements, can be placed inside and these are denoted by two underscores following the name of the block like .btn__price { }. Finally, modifiers can manipulate the block so that we can theme or style that particular component without inflicting changes on a completely unrelated module. This is done by appending two hyphens to the name of the block just like btn--orange.\r\n\r\nThe markup might then look like this:\r\n```html\r\n <a class=\"btn btn--big btn--orange\" href=\"https://css-tricks.com\">\r\n  <span class=\"btn__price\">$9.99</span>\r\n  <span class=\"btn__text\">Subscribe</span>\r\n</a>\r\n```\r\nIf another developer wrote this markup, and we weren’t familiar with the CSS, we should still have a good idea of which classes are responsible for what and how they depend on one another. Developers can then build their own components and modify the existing block to their heart’s content. Without writing much CSS, developers are potentially capable of creating many different combinations of buttons simply by changing a class in the markup.\r\n\r\n## Why should we consider BEM?\r\nIf we want to make a new style of a component, we can easily see which modifiers and children already exist. We might even realize we don’t need to write any CSS in the first place because there is a pre-existing modifier that does what we need.\r\nIf we are reading the markup instead of CSS, we should be able to quickly get an idea of which element depends on another (in the previous example we can see that .btn__price depends on .btn, even if we don’t know what that does just yet.)\r\nDesigners and developers can consistently name components for easier communication between team members. In other words, BEM gives everyone on a project a declarative syntax that they can share so that they’re on the same page."},{"id":1644015600,"img":"deploy.jpg\r","title":"Continuous deployment.\r","author":"Giovani Fouz Jiménez\r","date":"febraury 5, 2022\r","description":"CI/CD workflow...\r","position":"right\r","content":"\r\nContinuous integration (CI) and continuous delivery (CD) are two\r\napproaches to software development that are designed to improve code\r\nquality and enable rapid delivery and deployment of code. They are\r\nusually deployed together (CI/CD) to ensure rapid overall delivery of\r\nnew software features and fixes.\r\n\r\n## Continuous integration vs. continuous delivery\r\n\r\nThe develop and test phase of software development is the\r\nfocus of continuous integration. As developers change software code,\r\nthose changes are immediately checked into a central source code\r\ncontrol system. When code is checked in, automated build processes and\r\ntests are triggered to make sure that the changes did not break the\r\nlarger software system being worked on. When shorter and more frequent\r\ndevelop-build-test cycles are used, coding errors are caught more\r\nquickly, and the risk associated with large-scale code changes is\r\nmitigated.\r\n\r\nContinuous delivery means that as new software features and\r\nfixes pass through the develop-build-test cycle, they become available\r\nas rapidly as possible. When smaller changes are delivered more\r\nfrequently into production, the risk of large-scale changes breaking\r\nthe system goes down, and the delay in releasing them to customers is\r\nminimized.\r\n\r\n## What is continuous deployment?\r\nContinuous deployment extends CI/CD so that all changes that pass the\r\nCI/CD phase are immediately exposed to customers. With continuous\r\ndeployment, customers get faster access to new features and bug fixes,\r\nand developers get more immediate feedback about the changes they’ve\r\nmade. \r\n\r\nTop CI/CD tools Some common CI/CD tools are: CloudBees"},{"id":1645398000,"img":"inmutable.jpg\r","title":"Inmutabilidad\r","author":"Giovani Fouz Jiménez\r","date":"febraury 21, 2022\r","description":"Que significa inmutabilidad y...\r","position":"center\r","content":"\r\n## Mutable o Inmutable.\r\n\r\nEl desarrollo con datos inmutables es un principio fundamental de la\r\nprogramación funcional que se está extendiendo también en la\r\nprogramación orientada a objeto. Su planteamiento básico es muy\r\nsencillo: un dato u objeto, una vez creado, no puede ser cambiado,\r\nmanteniendo su estado original en todo momento. Si por algún motivo se\r\ntuviera que cambiar el dato, entonces se obtendría una copia con los\r\ndatos modificados, pero nunca se cambian los valores originales. Lo\r\ncontrario a la inmutabilidad es la mutabilidad, es decir, la capacidad\r\npara cambiar el valor o el estado de los elementos de un lenguaje de\r\nprogramación. Cuando cambiamos el valor de una propiedad, o la\r\nreferencia de una variable, estamos haciendo uso de mutabilidad, es\r\ndecir, de la capacidad de cambiar.\r\n\r\n## Utilidad de 'const' en JavaScript.\r\n\r\n'const' nos va ayudar a declarar variables inmutables, esto es, a\r\ndeclarar variables cuyo valor no pueda ser cambiado a lo largo del\r\nciclo de vida de una variable. si intentamos asignar un nuevo valor a\r\nla constante, se nos lanzará una excepción con el error provocado.\r\nTenemos que tener cuidado cuando deseemos almacenar un objeto JSON en\r\nuna constante de JavaScript. cuando asignamos un objeto a una\r\nvariable, no estamos almacenando el objeto en si en esa variable, si\r\nno que se está almacenando una referencia al objeto. Se almacena el\r\npuntero con la posición donde se encuentra el objeto real. Por tanto,\r\nsi seguimos esta lógica, lo que ‘const’ está convirtiendo en inmutable\r\nno es el objeto en si, si no la referencia a ese objeto.\r\n\r\n```js\r\n(() => {\r\n  const url = \"https://gist.github.com/\";\r\n  url = \"http://www.as.com\"; // Lanza un error!\r\n})();\r\n```\r\n\r\n#### Sin embargo, no se produce error al asignar nuevos valores \r\na la propiedades de un objeto:\r\n\r\n```js\r\n(() => {\r\n  const obj = {\r\n    nombre: \"Giovani\",\r\n  };\r\n  obj.apellidos = \"propiedad, valor\";\r\n  obj.nombre = \"cambio el valor,no excepción\";\r\n\r\n  console.log(any);\r\n})();\r\n\r\n```\r\nReitero lo anterior respecto a JavaScript,cuando asignamos un \r\nobjeto a una variable,no estamos almacenando el objeto en si \r\nen esa variable, si no que se está almacenando una referencia \r\ndel objeto. Se almacena el puntero con la posición en memoria \r\ndonde se encuentra el objeto real.\r\n\r\n"},{"id":1642201200,"img":"laptopstand.jpg\r","title":"What is a hash table.\r","author":"Giovani Fouz Jiménez\r","date":"january 15, 2022\r","description":"Hash tables? ...\r","position":"top\r","content":"\r\n## What is a hash table?\r\nA hash table (often called a hash map) is a data structure that maps\r\nkeys to values. Hash tables combine lookup, insert, and delete\r\noperations in an efficient way. The key is sent to a hash function that\r\nperforms arithmetic operations on it. The result (called the hash\r\nvalue or hash) is an index of the key-value pair.\r\nThis data structure is widely used in many kinds of computer software,\r\nparticularly for associative arrays, database indexing, caches, and\r\nsets. Usually, this operation returns the same hash for a given key.\r\nThe performance of a hash table depends on three fundamental factors\r\nhash function, size of the hash table, and collision handling method.\r\n\r\n## Hash tables are made up of two parts:\r\nObject: An object with the table where the data is stored. The array holds all the key-value\r\nentries in the table. The size of the array should be set according to the amount of data expected.\r\nHash function (or mapping function): This function determines the index of our key-value\r\npair. It should be a one-way function and produce the a different hash for each key.\r\nNote: In JavaScript, hash tables are generally implemented using arrays\r\nas they provide access to elements in constant time.\r\n\r\n## Uses of hash tables\r\nHash tables provide access to elements in constant time, so they are\r\nhighly recommended for algorithms that prioritize search and data\r\nretrieval operations. Hashing is ideal for large amounts of data, as\r\nthey take a constant amount of time to perform insertion, deletion,\r\nand search. In terms of time complexity, the operation is 0(1). On\r\naverage, a hash table lookup is more efficient than other table lookup\r\ndata structures.\r\nSome common uses of hash tables are:\r\nDatabase indexing\r\nCaches\r\nUnique data representation\r\nLookup in an unsorted array\r\nLookup in sorted array using binary search\r\n\r\n## What is a hash function?\r\nA hash function is a method or function that takes an item’s key as an\r\ninput, assigns a specific index to that key and returns the index\r\nwhenever the key is looked up. This operation usually returns the same\r\nhash for a given key. A good hash function should be efficient to\r\ncompute and uniformly distribute keys. Hash functions help to limit\r\nthe range of the keys to the boundaries of the array, so we need a\r\nfunction that converts a large key into a smaller key. This is the job\r\nof the hash function.\r\n\r\nthere is much more to talk on this interesting subject \r\nbut i will cover it on a future article.\r\n\r\nHappy learning!"},{"id":1648335600,"img":"javascript.jpg\r","title":" Convenciones Javascript. \r","author":"Giovani Fouz Jiménez\r","date":"march 27, 2022\r","description":"Una guía de estilos...\r","position":"top\r","content":"\r\n## Guía de estilos Javascript.\r\nHay muchas convenciones de codificación cuando se trata de usar el\r\nlenguaje de programación JavaScript. Las convenciones de codificación\r\nson pautas de estilo para la programación. Seguir esas convenciones\r\nmejorará su codificación JavaScript y hará que su código sea fácil de\r\nmantener y de leer. Entonces, en este artículo, decidí mostrarte\r\nalgunas convenciones de codificación simples que debes conocer.\r\n\r\n## Denominación de variables.\r\nEl uso de variables en JavaScript parece ser una tarea muy simple,\r\npero debe seguir algunas reglas al nombrar sus variables, por ejemplo,\r\ntendrá que usar camelCase para los nombres de los identificadores.\r\nTodos los nombres deben comenzar con una letra . El siguiente ejemplo\r\nsigue estas reglas:\r\n\r\n```js\r\n\r\n let firstName = \"giovani\";\r\n let lastName = \"fouz\"\r\n let price = 19.99;\r\n let tax = 0.15;\r\n let fullPrice = price + (price * tax);\r\n\r\n```\r\n## Longitud de la línea.\r\nPara mayor legibilidad, asegúrese de evitar líneas de más de 80\r\ncaracteres. pero si su declaración de JavaScript no cabe en una línea,\r\nel mejor lugar donde puede romperla es después de una coma o un\r\noperador. Eche un vistazo al siguiente ejemplo:\r\n\r\n```js\r\n /*Estas reglas harán que nuestro código\r\n   sea fácil de leer y comprender. */\r\n   document.getElementById(\"id\").innerHTML = \r\n   \"Hello World!\";  \r\n\r\n```\r\n## Espacios alrededor de los operadores.\r\nSiempre ponga espacios entre operadores ( = + - * / ) en su código\r\nJavaScript porque hace que se vea agradable y fácil de leer. Si lo\r\nhace como lo hicimos en el ejemplo siguiente, está bien.\r\n```js\r\nlet x = y + z;\r\nlet fullName = [\"giovani\", \"fouz\", \"jiménez\"];\r\nconst fn = (params) => {};\r\n\r\n```\r\n## Utilice nombres de archivo en minúsculas.\r\nLa mayoría de los servidores web (apache…) distinguen entre mayúsculas\r\ny minúsculas en los nombres de archivos. Por otro lado, algunos\r\nservidores web (Microsoft) no distinguen entre mayúsculas y minúsculas\r\nen los nombres de archivos. Entonces, digamos que se mudó del servidor\r\nApache al servidor de Microsoft donde estaba usando mayúsculas para\r\nlos nombres de archivo. Apache distingue entre mayúsculas y\r\nminúsculas, por lo que puede dañar su sitio web. Para evitar esa\r\nconfusión, utilice siempre nombres de archivo en minúsculas (si es\r\nposible).\r\n\r\n## Reglas de declaración.\r\nExisten algunas convenciones de codificación que debe tener en cuenta\r\nal escribir sus declaraciones de JavaScript:\r\n\r\nSiempre termine una declaración simple con un punto y coma.\r\nColoque el corchete de apertura al final de la primera línea.\r\nUtilice un espacio antes del soporte de apertura.\r\nColoque el corchete de cierre en una nueva línea, sin espacios iniciales.\r\n\r\n```js\r\n// objetos y matrices.\r\nlet frutas = [\"mango\", \"peras\", \"manzana\"];\r\n\r\nlet person = {\r\n    firstName: \"giovani\",\r\n    lastName: \"fouz\",\r\n    age: 46,\r\n    hairColor: \"brown\"\r\n};\r\n\r\n```\r\n\r\n```js\r\n// condicionales en javascript.\r\nif(weather === \"sunny\") {\r\n    time = true;\r\n}else {\r\n    time = false;\r\n}\r\n\r\n```\r\n## Conclusión.\r\nDe modo que , seguir las convenciones de codificación en JavaScript\r\nhace que nuestro código sea mantenible y fácil de leer por otros\r\ndesarrolladores. Solo quería enumerar estas reglas simples, porque\r\ntodos los desarrolladores de JavaScript deberían considerarlas. Así\r\nque eso es todo para este artículo, si está utilizando todas estas\r\nconvenciones, eso es genial, está en camino de convertirse en un buen\r\ndesarrollador, o tal vez ya sea un buen desarrollador de JavaScript."},{"id":1645052400,"img":"golden.jpg\r","title":"Ternary operators \r","author":"Giovani Fouz Jiménez\r","date":"febraury 17, 2022\r","description":"How to simplify your code with...\r","position":"center\r","content":"\r\n## Check Data Quickly with the Ternary Operator\r\n\r\nI love simple code. I’ll always try to get\r\nan expression reduced down to the fewest characters I can.\r\nI used to code as the following snippet shows some time back:\r\n\r\n```js\r\n    if(active) {\r\n        var display = 'bold'\r\n      }else {\r\n        var display = 'normal'\r\n    }\r\n```\r\nBut when i get to know 'ternary operators' \r\nI simplified the code to a one-line expression \r\nand my code has never been the same.\r\n\r\n```js\r\n var display = active ? 'bold' : 'normal';   \r\n\r\n```\r\n\r\nTernary operators are common in most languages, and they allow you to\r\ndo a quick if/then check. (Although they aren’t exclusively for this\r\npurpose, it is by far the most common usage.) If the ternary operator\r\nisn’t new, why should it interest me? In returning to some of the\r\nlarger themes we’ve been exploring, ternary expressions allow your\r\ncode to be not just more simple as I’ve mentioned, but also more pre-\r\ndictable. They do this because they cut down on the number of\r\nvariables that are being reassigned. Besides, with new variable types,\r\nwe hit some problems with excessive if/else statements. If you try to\r\ncheck a variable and you’re using a block scoped variable, you won’t\r\nbe able to access the variable outside of the check.\r\n\r\n```js\r\n if (title === 'manager') {\r\n    const permissions = ['time', 'pay'];\r\n    } else {\r\n    const permissions = ['time'];\r\n    }\r\n    permissions;\r\n// ReferenceError: permissions is not defined\r\n\r\n```\r\nNow you’re forced to either use  var , which is accessible outside the block\r\nscope, or you have to define the variable with  let and then reassign it inside\r\nthe  if/else block. Here’s how it would look with the assignment before the block:\r\n\r\n```js\r\n if (title === 'manager') {\r\n    const permissions = ['time', 'pay'];\r\n    } else {\r\n    const permissions = ['time'];\r\n    }\r\n    permissions;\r\n// ReferenceError: permissions is not defined\r\n\r\n```\r\nBefore  let and  const , we didn’t have to worry so much about when variables\r\nwere created. Now, in addition to excessive code, there’s a potential for scope\r\nconflicts.\r\nTernary expressions solve these problems. Clearly, they cut down on a lot of\r\nextra code. But they also allow us to be more predictable by assigning a\r\nvalue directly to  const . How could you rewrite the preceding code to use  const\r\nand a ternary?\r\n\r\n```js\r\n const permissions = title === 'manager' ? ['time', 'pay'] : ['time']\r\n\r\n```\r\nMuch cleaner and you now have a predictable value.\r\nThere’s one caution we should keep in mind: Though we can chain multiple\r\nternary expressions together, we should avoid doing so.\r\nTernary expressions can simplify things, but use them when they add value\r\nand go back to standard 'if blocks' if they create too much ambiguity.\r\n"}]