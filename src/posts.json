[{"id":1644015600,"img":"deploy.jpg\r","title":"Continuous deployment.\r","author":"Giovani Fouz Jiménez\r","date":"febraury 5, 2022\r","description":"Continuous deployment and...\r","position":"right\r","content":"\r\nContinuous integration (CI) and continuous delivery (CD) are two\r\napproaches to software development that are designed to improve code\r\nquality and enable rapid delivery and deployment of code. They are\r\nusually deployed together (CI/CD) to ensure rapid overall delivery of\r\nnew software features and fixes.\r\n\r\n## Continuous integration vs. continuous delivery\r\n\r\nThe develop and test phase of software development is the\r\nfocus of continuous integration. As developers change software code,\r\nthose changes are immediately checked into a central source code\r\ncontrol system. When code is checked in, automated build processes and\r\ntests are triggered to make sure that the changes did not break the\r\nlarger software system being worked on. When shorter and more frequent\r\ndevelop-build-test cycles are used, coding errors are caught more\r\nquickly, and the risk associated with large-scale code changes is\r\nmitigated.\r\n\r\nContinuous delivery means that as new software features and\r\nfixes pass through the develop-build-test cycle, they become available\r\nas rapidly as possible. When smaller changes are delivered more\r\nfrequently into production, the risk of large-scale changes breaking\r\nthe system goes down, and the delay in releasing them to customers is\r\nminimized.\r\n\r\n## What is continuous deployment?\r\nContinuous deployment extends CI/CD so that all changes that pass the\r\nCI/CD phase are immediately exposed to customers. With continuous\r\ndeployment, customers get faster access to new features and bug fixes,\r\nand developers get more immediate feedback about the changes they’ve\r\nmade. \r\n\r\nTop CI/CD tools Some common CI/CD tools are: CloudBees"},{"id":1645398000,"img":"inmutable.jpg\r","title":"Inmutabilidad\r","author":"Giovani Fouz Jiménez\r","date":"febraury 21, 2022\r","description":"Que significa inmutabilidad y porque es tan importante...\r","position":"center\r","content":"\r\n## Mutable o Inmutable.\r\n\r\nEl desarrollo con datos inmutables es un principio fundamental de la\r\nprogramación funcional que se está extendiendo también en la\r\nprogramación orientada a objeto. Su planteamiento básico es muy\r\nsencillo: un dato u objeto, una vez creado, no puede ser cambiado,\r\nmanteniendo su estado original en todo momento. Si por algún motivo se\r\ntuviera que cambiar el dato, entonces se obtendría una copia con los\r\ndatos modificados, pero nunca se cambian los valores originales. Lo\r\ncontrario a la inmutabilidad es la mutabilidad, es decir, la capacidad\r\npara cambiar el valor o el estado de los elementos de un lenguaje de\r\nprogramación. Cuando cambiamos el valor de una propiedad, o la\r\nreferencia de una variable, estamos haciendo uso de mutabilidad, es\r\ndecir, de la capacidad de cambiar.\r\n\r\n## Utilidad de 'const' en JavaScript.\r\n\r\n'const' nos va ayudar a declarar variables inmutables, esto es, a\r\ndeclarar variables cuyo valor no pueda ser cambiado a lo largo del\r\nciclo de vida de una variable. si intentamos asignar un nuevo valor a\r\nla constante, se nos lanzará una excepción con el error provocado.\r\nTenemos que tener cuidado cuando deseemos almacenar un objeto JSON en\r\nuna constante de JavaScript. cuando asignamos un objeto a una\r\nvariable, no estamos almacenando el objeto en si en esa variable, si\r\nno que se está almacenando una referencia al objeto. Se almacena el\r\npuntero con la posición donde se encuentra el objeto real. Por tanto,\r\nsi seguimos esta lógica, lo que ‘const’ está convirtiendo en inmutable\r\nno es el objeto en si, si no la referencia a ese objeto.\r\n\r\n```js\r\n(() => {\r\n  const url = \"https://gist.github.com/\";\r\n  url = \"http://www.as.com\"; // Lanza un error!\r\n})();\r\n```\r\n\r\n#### Sin embargo, no se produce error al asignar nuevos valores \r\na la propiedades de un objeto:\r\n\r\n```js\r\n(() => {\r\n  const obj = {\r\n    nombre: \"Giovani\",\r\n  };\r\n  obj.apellidos = \"propiedad, valor mutable\";\r\n  obj.nombre = \"cambio el valor,no hay excepción\";\r\n\r\n  console.log(any);\r\n})();\r\n\r\n```\r\nReitero lo anterior respecto a JavaScript,cuando asignamos un \r\nobjeto a una variable,no estamos almacenando el objeto en si \r\nen esa variable, si no que se está almacenando una referencia \r\ndel objeto. Se almacena el puntero con la posición en memoria \r\ndonde se encuentra el objeto real.\r\n\r\n"},{"id":1642201200,"img":"laptopstand.jpg\r","title":"composición funcional\r","author":"Giovani Fouz Jiménez\r","date":"january 15, 2022\r","description":"El paradigma de la programación funcional es...\r","position":"top\r","content":"\r\n## Composición funcional\r\nLa composición es la piedra angular que nos permitirá a partir de \r\nfunciones puras genéricas crear funciones más específicas para al \r\nfinal construir nuestros programas.Similar a como en la música las notas \r\n(funciones puras) conforman acordes (funciones de dominio compuestas)\r\ny los acordes conforman obras (pieza de software), la composición será \r\nel pegamento que nos permitirá desarrollar nuestros programas."},{"id":1645052400,"img":"golden.jpg\r","title":"Ternary operators \r","author":"Giovani Fouz Jiménez\r","date":"febraury 17, 2022\r","description":"How to simplify your code with...\r","position":"center\r","content":"\r\n## Check Data Quickly with the Ternary Operator\r\n\r\nI love simple code. I’ll always try to get\r\nan expression reduced down to the fewest characters I can.\r\nI used to code as the following snippet shows some time back:\r\n\r\n```js\r\n    if(active) {\r\n        var display = 'bold'\r\n      }else {\r\n        var display = 'normal'\r\n    }\r\n```\r\nBut when i get to know 'ternary operators' \r\nI simplified the code to a one-line expression \r\nand my code has never been the same.\r\n\r\n```js\r\n var display = active ? 'bold' : 'normal';   \r\n\r\n```\r\n\r\nTernary operators are common in most languages, and they allow you to\r\ndo a quick if/then check. (Although they aren’t exclusively for this\r\npurpose, it is by far the most common usage.) If the ternary operator\r\nisn’t new, why should it interest me? In returning to some of the\r\nlarger themes we’ve been exploring, ternary expressions allow your\r\ncode to be not just more simple as I’ve mentioned, but also more pre-\r\ndictable. They do this because they cut down on the number of\r\nvariables that are being reassigned. Besides, with new variable types,\r\nwe hit some problems with excessive if/else statements. If you try to\r\ncheck a variable and you’re using a block scoped variable, you won’t\r\nbe able to access the variable outside of the check.\r\n\r\n```js\r\n if (title === 'manager') {\r\n    const permissions = ['time', 'pay'];\r\n    } else {\r\n    const permissions = ['time'];\r\n    }\r\n    permissions;\r\n// ReferenceError: permissions is not defined\r\n\r\n```\r\nNow you’re forced to either use  var , which is accessible outside the block\r\nscope, or you have to define the variable with  let and then reassign it inside\r\nthe  if/else block. Here’s how it would look with the assignment before the block:\r\n\r\n```js\r\n if (title === 'manager') {\r\n    const permissions = ['time', 'pay'];\r\n    } else {\r\n    const permissions = ['time'];\r\n    }\r\n    permissions;\r\n// ReferenceError: permissions is not defined\r\n\r\n```\r\nBefore  let and  const , we didn’t have to worry so much about when variables\r\nwere created. Now, in addition to excessive code, there’s a potential for scope\r\nconflicts.\r\nTernary expressions solve these problems. Clearly, they cut down on a lot of\r\nextra code. But they also allow us to be more predictable by assigning a\r\nvalue directly to  const . How could you rewrite the preceding code to use  const\r\nand a ternary?\r\n\r\n```js\r\n const permissions = title === 'manager' ? ['time', 'pay'] : ['time']\r\n\r\n```\r\nMuch cleaner and you now have a predictable value.\r\nThere’s one caution we should keep in mind: Though we can chain multiple\r\nternary expressions together, we should avoid doing so.\r\nTernary expressions can simplify things, but use them when they add value\r\nand go back to standard 'if blocks' if they create too much ambiguity.\r\n"}]